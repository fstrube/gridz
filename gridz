#!/usr/bin/env python
import gtk.gdk
import math
import os
import sys

class Gridz:
	def __init__(self):
		self._NAME = "Gridz"
		self._VERSION = "0.1"
		self._AUTHORS = [
			"Franklin P. Strube\nhttp://franklinstrube.com"
		]
		self._INI = os.path.expanduser('~')+"/.gridz"
		
		self._defaults = {
			"shrink-left"  : "<Super>Left",
			"shrink-up"    : "<Super>Up",
			"shrink-down"  : "<Super>Down",
			"shrink-right" : "<Super>Right",
			"grow-left"    : "<Super><Ctrl>Left",
			"grow-up"      : "<Super><Ctrl>Up",
			"grow-down"    : "<Super><Ctrl>Down",
			"grow-right"   : "<Super><Ctrl>Right"
		}
		self._hotkeys = {}
		for toggle in self._defaults:
			self._hotkeys[toggle] = self._defaults[toggle]
		
		# Parse user config hotkeys
		self._init_settings()
		
		# Bind hotkeys
		self._init_keys()
		
		# Setup the systray
		self._init_taskbar()
		
	def _get_active_window(self):
		# Get the root and active window
		root = gtk.gdk.screen_get_default()
		if root.supports_net_wm_hint("_NET_ACTIVE_WINDOW") and root.supports_net_wm_hint("_NET_WM_WINDOW_TYPE"):
			active = root.get_active_window()
			if active.property_get("_NET_WM_WINDOW_TYPE")[-1][0] == '_NET_WM_WINDOW_TYPE_DESKTOP' :
				return False

		else:
			return False
	
		return active
	
	def _init_keys(self):
		# Detect python-keybinder
		try:
			import keybinder
			
			print self._hotkeys
		
			for toggle in self._hotkeys:
				keybinder.bind(self._hotkeys[toggle], self.grid_callback, toggle)
		
		except:
			# Show an error dialog
			link = gtk.LinkButton("http://kaizer.se/wiki/keybinder/", "Python Keybinder Homepage")
			link.show()
			
			dialog = gtk.MessageDialog(type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_OK, message_format="In order to use Gridz, you must have the Python Keybinder library installed.")
			dialog.set_title("Fatal Error: Missing required dependency")
			dialog.get_message_area().pack_start(link)

			response = dialog.run()
			exit(127)
			
	def _init_settings(self):
		_hotkeys = False
		_preferences = False
		
		if not os.path.exists(self._INI):
			return False
		
		f = open(self._INI, 'r')
		
		for line in f:
			line = line.rstrip().lstrip()
			if line.find('#') == 0:
				continue
				
			if line.upper() == "[HOTKEYS]":
				_hotkeys = True
			elif line.upper() == "[PREFERENCES]":
				_preferences = True
			elif _hotkeys:
				# Add hotkey to the mix
				toggle, hotkey = line.split('=')
				self._hotkeys[toggle] = hotkey
			elif _preferences:
				# Set preferences
				key, value = line.split('=')
				self._options[key] = value
		
	def _init_taskbar(self):
		print "Initializing taskbar..."
		self._taskbar = GridzTaskbar(self)
		
	def grid_callback(self, toggle):
		active = self._get_active_window()
		screen = gtk.gdk.Screen()
		monitor = screen.get_monitor_at_window(active)
		rect = screen.get_monitor_geometry(monitor)

		# Calculate the size of the wm decorations
		relativex, relativey, winw, winh, d = active.get_geometry() 
		w = winw# + (relativex*2)
		h = winh# + (relativey)

		# Calculate the position of where the wm decorations start (not the window itself)
		screenposx, screenposy = active.get_root_origin()
		
		growx = math.ceil(rect.width / 5)
		growy = math.ceil(rect.height / 5)
		
		
		# Shrinking
		if toggle == 'shrink-left':
			width = rect.width
			while width >= w and width > growx:
				width = max(growx, width - growx)
			x = 0
			y = screenposy
			height = h
		elif toggle == 'shrink-right':
			width = rect.width
			while width >= w and width > growx:
				width = max(growx, width - growx)
			x = rect.width - int(width)
			y = screenposy
			height = h
		elif toggle == 'shrink-up':
			height = rect.height
			while height >= h and height > growy:
				height = max(growy, height - growy)
			y = 0
			x = screenposx
			width = w
		elif toggle == 'shrink-down':
			height = rect.height
			while height >= h and height > growy:
				height = max(growy, height - growy)
			y = rect.height - int(height)
			x = screenposx
			width = w
		# Growing
		elif toggle == 'grow-left':
			width = growx
			while width <= w and width < rect.width:
				width = width + growx
			x = 0
			y = screenposy
			height = h
		elif toggle == 'grow-right':
			width = growx
			while width <= w and width < rect.width:
				width = width + growx
			x = rect.width - int(width)
			y = screenposy
			height = h
		elif toggle == 'grow-up':
			height = growy
			while height <= h and height < rect.height:
				height = height + growy
			y = 0
			x = screenposx
			width = w
		elif toggle == 'grow-down':
			height = growy
			while height <= h and height < rect.height:
				height = height + growy
			y = rect.height - int(height)
			x = screenposx
			width = w
			
		# Move and resize the window
		width = min(rect.width,max(growx,width))
		height = min(rect.height,max(growy,height))
		x = max(0,x)
		y = max(0,y)
		active.move_resize(int(x), int(y), int(width), int(height))
		
	def quit(self, widget=None):
		print widget
		gtk.main_quit()
		sys.exit()
	
	def show_about_dialog(self, widget=None):
		link = gtk.LinkButton("http://github.com/fstrube/gridz", "Gridz on GitHub")
		link.show()
			
		dialog = gtk.MessageDialog(None, 0, gtk.MESSAGE_ERROR, gtk.BUTTONS_CLOSE, "Gridz: Window Resizing Utility for Linux")
		dialog.set_title("About Gridz")
		dialog.get_message_area().pack_start(link)
		
		def response(dialog, response_id):
			if response_id == gtk.RESPONSE_CLOSE:
				dialog.destroy()
			
		dialog.connect("response", response)
		
		dialog.run()
		
class GridzTaskbar(gtk.StatusIcon):
	def __init__(self, app):
		gtk.StatusIcon.__init__(self)
		self._app = app
		self._initIcon()
		self._initMenu()
		
	def _initIcon(self):
		# Setup the icon
		self.set_from_stock(gtk.STOCK_FULLSCREEN)
		
	def _initMenu(self):
		# Setup the menu
		about = gtk.MenuItem(label="About")
		about.connect("activate", self._app.show_about_dialog)
		quit = gtk.MenuItem(label="Quit Gridz")
		quit.connect("activate", self._app.quit)
		self._menu = gtk.Menu()
		self._menu.append(about)
		self._menu.append(quit)
		self.connect("popup-menu", self._popup_menu)
		
	def _popup_menu(self, icon, button, time):
		self._menu.show_all()
		self._menu.popup(None, None, gtk.status_icon_position_menu, button, time, self)
		
if __name__ == '__main__':
	Gridz()
	gtk.main()
